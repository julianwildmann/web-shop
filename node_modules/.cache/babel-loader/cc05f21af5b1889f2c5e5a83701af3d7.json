{"ast":null,"code":"/**\n * @author Kai Salmen / https://kaisalmen.de\n * Development repository: https://github.com/kaisalmen/WWOBJLoader\n */\nimport { DefaultLoadingManager, FileLoader, Group } from \"../../../build/three.module.js\";\nimport { Parser } from \"./worker/independent/OBJLoader2Parser.js\";\nimport { MeshReceiver } from \"./shared/MeshReceiver.js\";\nimport { MaterialHandler } from \"./shared/MaterialHandler.js\";\n/**\n * Use this class to load OBJ data from files or to parse OBJ data from an arraybuffer\n * @class\n *\n * @param {DefaultLoadingManager} [manager] The loadingManager for the loader to use. Default is {@link DefaultLoadingManager}\n */\n\nconst OBJLoader2 = function (manager) {\n  this.manager = manager !== undefined && manager !== null ? manager : DefaultLoadingManager;\n  this.logging = {\n    enabled: true,\n    debug: false\n  };\n  this.modelName = '';\n  this.instanceNo = 0;\n  this.path = undefined;\n  this.resourcePath = undefined;\n  this.useIndices = false;\n  this.disregardNormals = false;\n  this.materialPerSmoothingGroup = false;\n  this.useOAsMesh = false;\n  this.baseObject3d = new Group();\n  this.callbacks = {\n    onParseProgress: undefined,\n    genericErrorHandler: undefined\n  };\n  this.materialHandler = new MaterialHandler();\n  this.meshReceiver = new MeshReceiver(this.materialHandler);\n};\n\nOBJLoader2.OBJLOADER2_VERSION = '3.0.0-beta';\nconsole.info('Using OBJLoader2 version: ' + OBJLoader2.OBJLOADER2_VERSION);\nOBJLoader2.prototype = {\n  constructor: OBJLoader2,\n\n  /**\n   * Enable or disable logging in general (except warn and error), plus enable or disable debug logging.\n   *\n   * @param {boolean} enabled True or false.\n   * @param {boolean} debug True or false.\n   */\n  setLogging: function (enabled, debug) {\n    this.logging.enabled = enabled === true;\n    this.logging.debug = debug === true;\n    return this;\n  },\n\n  /**\n   * Set the name of the model.\n   *\n   * @param {string} modelName\n   */\n  setModelName: function (modelName) {\n    this.modelName = modelName ? modelName : this.modelName;\n    return this;\n  },\n\n  /**\n   * The URL of the base path.\n   *\n   * @param {string} path URL\n   */\n  setPath: function (path) {\n    this.path = path ? path : this.path;\n    return this;\n  },\n\n  /**\n   * Allow to specify resourcePath for dependencies of specified resource.\n   * @param {string} resourcePath\n   */\n  setResourcePath: function (resourcePath) {\n    this.resourcePath = resourcePath ? resourcePath : this.resourcePath;\n  },\n\n  /**\n   * Set the node where the loaded objects will be attached directly.\n   *\n   * @param {Object3D} baseObject3d Object already attached to scenegraph where new meshes will be attached to\n   */\n  setBaseObject3d: function (baseObject3d) {\n    this.baseObject3d = baseObject3d === undefined || baseObject3d === null ? this.baseObject3d : baseObject3d;\n    return this;\n  },\n\n  /**\n   * Add materials as associated array.\n   *\n   * @param materials Object with named {@link Material}\n   */\n  addMaterials: function (materials) {\n    this.materialHandler.addMaterials(materials);\n  },\n\n  /**\n   * Instructs loaders to create indexed {@link BufferGeometry}.\n   *\n   * @param {boolean} useIndices=false\n   */\n  setUseIndices: function (useIndices) {\n    this.useIndices = useIndices === true;\n    return this;\n  },\n\n  /**\n   * Tells whether normals should be completely disregarded and regenerated.\n   *\n   * @param {boolean} disregardNormals=false\n   */\n  setDisregardNormals: function (disregardNormals) {\n    this.disregardNormals = disregardNormals === true;\n    return this;\n  },\n\n  /**\n   * Tells whether a material shall be created per smoothing group.\n   *\n   * @param {boolean} materialPerSmoothingGroup=false\n   */\n  setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {\n    this.materialPerSmoothingGroup = materialPerSmoothingGroup === true;\n    return this;\n  },\n\n  /**\n   * Usually 'o' is meta-information and does not result in creation of new meshes, but mesh creation on occurrence of \"o\" can be enforced.\n   *\n   * @param {boolean} useOAsMesh=false\n   */\n  setUseOAsMesh: function (useOAsMesh) {\n    this.useOAsMesh = useOAsMesh === true;\n    return this;\n  },\n\n  /**\n   * Register an generic error handler that is called if available instead of throwing an exception\n   * @param {Function} genericErrorHandler\n   */\n  setGenericErrorHandler: function (genericErrorHandler) {\n    if (genericErrorHandler !== undefined && genericErrorHandler !== null) {\n      this.callbacks.genericErrorHandler = genericErrorHandler;\n    }\n  },\n\n  /**\n   *\n   * @private\n   *\n   * @param {Function} [onParseProgress]\n   * @param {Function} [onMeshAlter]\n   * @param {Function} [onLoadMaterials]\n   * @private\n   */\n  _setCallbacks: function (onParseProgress, onMeshAlter, onLoadMaterials) {\n    if (onParseProgress !== undefined && onParseProgress !== null) {\n      this.callbacks.onParseProgress = onParseProgress;\n    }\n\n    this.meshReceiver._setCallbacks(onParseProgress, onMeshAlter);\n\n    this.materialHandler._setCallbacks(onLoadMaterials);\n  },\n\n  /**\n   * Announce feedback which is give to the registered callbacks.\n   * @private\n   *\n   * @param {string} type The type of event\n   * @param {string} text Textual description of the event\n   * @param {number} numericalValue Numerical value describing the progress\n   */\n  _onProgress: function (type, text, numericalValue) {\n    let message = text ? text : '';\n    let event = {\n      detail: {\n        type: type,\n        modelName: this.modelName,\n        instanceNo: this.instanceNo,\n        text: message,\n        numericalValue: numericalValue\n      }\n    };\n\n    if (this.callbacks.onParseProgress) {\n      this.callbacks.onParseProgress(event);\n    }\n\n    if (this.logging.enabled && this.logging.debug) {\n      console.log(message);\n    }\n  },\n\n  /**\n   * Announce error feedback which is given to the generic error handler to the registered callbacks.\n   * @private\n   *\n   * @param {String} errorMessage The event containing the error\n   */\n  _onError: function (errorMessage) {\n    if (this.callbacks.genericErrorHandler) {\n      this.callbacks.genericErrorHandler(errorMessage);\n    }\n\n    if (this.logging.enabled && this.logging.debug) {\n      console.log(errorMessage);\n    }\n  },\n\n  /**\n   * Use this convenient method to load a file at the given URL. By default the fileLoader uses an ArrayBuffer.\n   *\n   * @param {string}  url A string containing the path/URL of the file to be loaded.\n   * @param {function} onLoad A function to be called after loading is successfully completed. The function receives loaded Object3D as an argument.\n   * @param {function} [onFileLoadProgress] A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and Integer bytes.\n   * @param {function} [onError] A function to be called if an error occurs during loading. The function receives the error as an argument.\n   * @param {function} [onMeshAlter] Called after worker successfully delivered a single mesh\n   */\n  load: function (url, onLoad, onFileLoadProgress, onError, onMeshAlter) {\n    let scope = this;\n\n    if (onError === null || onError === undefined) {\n      onError = function (event) {\n        let errorMessage = event;\n\n        if (event.currentTarget && event.currentTarget.statusText !== null) {\n          errorMessage = 'Error occurred while downloading!\\nurl: ' + event.currentTarget.responseURL + '\\nstatus: ' + event.currentTarget.statusText;\n        }\n\n        scope._onError(errorMessage);\n      };\n    }\n\n    if (!url) {\n      onError('An invalid url was provided. Unable to continue!');\n    }\n\n    let urlFull = new URL(url, window.location.href).href;\n    let filename = urlFull;\n    let urlParts = urlFull.split('/');\n\n    if (urlParts.length > 2) {\n      filename = urlParts[urlParts.length - 1];\n      let urlPartsPath = urlParts.slice(0, urlParts.length - 1).join('/') + '/';\n      if (urlPartsPath !== undefined && urlPartsPath !== null) this.path = urlPartsPath;\n    }\n\n    if (onFileLoadProgress === null || onFileLoadProgress === undefined) {\n      let numericalValueRef = 0;\n      let numericalValue = 0;\n\n      onFileLoadProgress = function (event) {\n        if (!event.lengthComputable) return;\n        numericalValue = event.loaded / event.total;\n\n        if (numericalValue > numericalValueRef) {\n          numericalValueRef = numericalValue;\n          let output = 'Download of \"' + url + '\": ' + (numericalValue * 100).toFixed(2) + '%';\n\n          scope._onProgress('progressLoad', output, numericalValue);\n        }\n      };\n    }\n\n    this._setCallbacks(null, onMeshAlter, null);\n\n    let fileLoaderOnLoad = function (content) {\n      onLoad(scope.parse(content));\n    };\n\n    let fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path || this.resourcePath);\n    fileLoader.setResponseType('arraybuffer');\n    fileLoader.load(filename, fileLoaderOnLoad, onFileLoadProgress, onError);\n  },\n\n  /**\n   * Parses OBJ data synchronously from arraybuffer or string.\n   *\n   * @param {arraybuffer|string} content OBJ data as Uint8Array or String\n   */\n  parse: function (content) {\n    // fast-fail in case of illegal data\n    if (content === null || content === undefined) {\n      throw 'Provided content is not a valid ArrayBuffer or String. Unable to continue parsing';\n    }\n\n    if (this.logging.enabled) {\n      console.time('OBJLoader parse: ' + this.modelName);\n    }\n\n    let parser = new Parser();\n    parser.setLogging(this.logging.enabled, this.logging.debug);\n    parser.setMaterialPerSmoothingGroup(this.materialPerSmoothingGroup);\n    parser.setUseOAsMesh(this.useOAsMesh);\n    parser.setUseIndices(this.useIndices);\n    parser.setDisregardNormals(this.disregardNormals); // sync code works directly on the material references\n\n    parser.setMaterials(this.materialHandler.getMaterials());\n    let scope = this;\n\n    let onMeshLoaded = function (payload) {\n      if (payload.cmd !== 'data') return;\n\n      if (payload.type === 'mesh') {\n        let meshes = scope.meshReceiver.buildMeshes(payload);\n\n        for (let mesh of meshes) {\n          scope.baseObject3d.add(mesh);\n        }\n      } else if (payload.type === 'material') {\n        scope.materialHandler.addPayloadMaterials(payload);\n      }\n    };\n\n    let onProgressScoped = function (text, numericalValue) {\n      scope._onProgress('progressParse', text, numericalValue);\n    };\n\n    let onErrorScoped = function (message) {\n      scope._onError(message);\n    };\n\n    parser.setCallbackOnAssetAvailable(onMeshLoaded);\n    parser.setCallbackOnProgress(onProgressScoped);\n    parser.setCallbackOnError(onErrorScoped);\n\n    if (content instanceof ArrayBuffer || content instanceof Uint8Array) {\n      if (this.logging.enabled) console.info('Parsing arrayBuffer...');\n      parser.parse(content);\n    } else if (typeof content === 'string' || content instanceof String) {\n      if (this.logging.enabled) console.info('Parsing text...');\n      parser.parseText(content);\n    } else {\n      scope._onError('Provided content was neither of type String nor Uint8Array! Aborting...');\n    }\n\n    if (this.logging.enabled) {\n      console.timeEnd('OBJLoader parse: ' + this.modelName);\n    }\n\n    return this.baseObject3d;\n  }\n};\nexport { OBJLoader2 };","map":{"version":3,"sources":["/Users/julianwildmann/Documents/01_Studium/LMU/04_Master_Thesis/Repository/online-shop/src/components/OBJLoader2.js"],"names":["DefaultLoadingManager","FileLoader","Group","Parser","MeshReceiver","MaterialHandler","OBJLoader2","manager","undefined","logging","enabled","debug","modelName","instanceNo","path","resourcePath","useIndices","disregardNormals","materialPerSmoothingGroup","useOAsMesh","baseObject3d","callbacks","onParseProgress","genericErrorHandler","materialHandler","meshReceiver","OBJLOADER2_VERSION","console","info","prototype","constructor","setLogging","setModelName","setPath","setResourcePath","setBaseObject3d","addMaterials","materials","setUseIndices","setDisregardNormals","setMaterialPerSmoothingGroup","setUseOAsMesh","setGenericErrorHandler","_setCallbacks","onMeshAlter","onLoadMaterials","_onProgress","type","text","numericalValue","message","event","detail","log","_onError","errorMessage","load","url","onLoad","onFileLoadProgress","onError","scope","currentTarget","statusText","responseURL","urlFull","URL","window","location","href","filename","urlParts","split","length","urlPartsPath","slice","join","numericalValueRef","lengthComputable","loaded","total","output","toFixed","fileLoaderOnLoad","content","parse","fileLoader","setResponseType","time","parser","setMaterials","getMaterials","onMeshLoaded","payload","cmd","meshes","buildMeshes","mesh","add","addPayloadMaterials","onProgressScoped","onErrorScoped","setCallbackOnAssetAvailable","setCallbackOnProgress","setCallbackOnError","ArrayBuffer","Uint8Array","String","parseText","timeEnd"],"mappings":"AAAA;;;;AAKA,SACCA,qBADD,EAECC,UAFD,EAGCC,KAHD,QAIO,gCAJP;AAMA,SAASC,MAAT,QAAuB,0CAAvB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA;;;;;;;AAMA,MAAMC,UAAU,GAAG,UAAWC,OAAX,EAAqB;AACvC,OAAKA,OAAL,GAAiBA,OAAO,KAAKC,SAAZ,IAAyBD,OAAO,KAAK,IAAvC,GAAgDA,OAAhD,GAA0DP,qBAAzE;AACA,OAAKS,OAAL,GAAe;AACdC,IAAAA,OAAO,EAAE,IADK;AAEdC,IAAAA,KAAK,EAAE;AAFO,GAAf;AAKA,OAAKC,SAAL,GAAiB,EAAjB;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAKC,IAAL,GAAYN,SAAZ;AACA,OAAKO,YAAL,GAAoBP,SAApB;AACA,OAAKQ,UAAL,GAAkB,KAAlB;AACA,OAAKC,gBAAL,GAAwB,KAAxB;AACA,OAAKC,yBAAL,GAAiC,KAAjC;AACA,OAAKC,UAAL,GAAkB,KAAlB;AACA,OAAKC,YAAL,GAAoB,IAAIlB,KAAJ,EAApB;AAEA,OAAKmB,SAAL,GAAiB;AAChBC,IAAAA,eAAe,EAAEd,SADD;AAEhBe,IAAAA,mBAAmB,EAAEf;AAFL,GAAjB;AAKA,OAAKgB,eAAL,GAAuB,IAAInB,eAAJ,EAAvB;AACA,OAAKoB,YAAL,GAAoB,IAAIrB,YAAJ,CAAkB,KAAKoB,eAAvB,CAApB;AACA,CAxBD;;AAyBAlB,UAAU,CAACoB,kBAAX,GAAgC,YAAhC;AACAC,OAAO,CAACC,IAAR,CAAc,+BAA+BtB,UAAU,CAACoB,kBAAxD;AAGApB,UAAU,CAACuB,SAAX,GAAuB;AAEtBC,EAAAA,WAAW,EAAExB,UAFS;;AAItB;;;;;;AAMAyB,EAAAA,UAAU,EAAE,UAAWrB,OAAX,EAAoBC,KAApB,EAA4B;AACvC,SAAKF,OAAL,CAAaC,OAAb,GAAuBA,OAAO,KAAK,IAAnC;AACA,SAAKD,OAAL,CAAaE,KAAb,GAAqBA,KAAK,KAAK,IAA/B;AACA,WAAO,IAAP;AACA,GAdqB;;AAgBtB;;;;;AAKAqB,EAAAA,YAAY,EAAE,UAAWpB,SAAX,EAAuB;AACpC,SAAKA,SAAL,GAAiBA,SAAS,GAAGA,SAAH,GAAe,KAAKA,SAA9C;AACA,WAAO,IAAP;AACA,GAxBqB;;AA0BtB;;;;;AAKAqB,EAAAA,OAAO,EAAE,UAAWnB,IAAX,EAAkB;AAC1B,SAAKA,IAAL,GAAYA,IAAI,GAAGA,IAAH,GAAU,KAAKA,IAA/B;AACA,WAAO,IAAP;AACA,GAlCqB;;AAqCtB;;;;AAIAoB,EAAAA,eAAe,EAAE,UAAWnB,YAAX,EAA0B;AAC1C,SAAKA,YAAL,GAAoBA,YAAY,GAAGA,YAAH,GAAkB,KAAKA,YAAvD;AACA,GA3CqB;;AA6CtB;;;;;AAKAoB,EAAAA,eAAe,EAAE,UAAWf,YAAX,EAA0B;AAC1C,SAAKA,YAAL,GAAsBA,YAAY,KAAKZ,SAAjB,IAA8BY,YAAY,KAAK,IAAjD,GAA0D,KAAKA,YAA/D,GAA8EA,YAAlG;AACA,WAAO,IAAP;AACA,GArDqB;;AAuDtB;;;;;AAKAgB,EAAAA,YAAY,EAAE,UAAWC,SAAX,EAAuB;AACpC,SAAKb,eAAL,CAAqBY,YAArB,CAAmCC,SAAnC;AACA,GA9DqB;;AAgEtB;;;;;AAKAC,EAAAA,aAAa,EAAE,UAAWtB,UAAX,EAAwB;AACtC,SAAKA,UAAL,GAAkBA,UAAU,KAAK,IAAjC;AACA,WAAO,IAAP;AACA,GAxEqB;;AA0EtB;;;;;AAKAuB,EAAAA,mBAAmB,EAAE,UAAWtB,gBAAX,EAA8B;AAClD,SAAKA,gBAAL,GAAwBA,gBAAgB,KAAK,IAA7C;AACA,WAAO,IAAP;AACA,GAlFqB;;AAoFtB;;;;;AAKAuB,EAAAA,4BAA4B,EAAE,UAAWtB,yBAAX,EAAuC;AACpE,SAAKA,yBAAL,GAAiCA,yBAAyB,KAAK,IAA/D;AACA,WAAO,IAAP;AACA,GA5FqB;;AA8FtB;;;;;AAKAuB,EAAAA,aAAa,EAAE,UAAWtB,UAAX,EAAwB;AACtC,SAAKA,UAAL,GAAkBA,UAAU,KAAK,IAAjC;AACA,WAAO,IAAP;AACA,GAtGqB;;AAwGtB;;;;AAIAuB,EAAAA,sBAAsB,EAAE,UAAWnB,mBAAX,EAAiC;AACxD,QAAKA,mBAAmB,KAAKf,SAAxB,IAAqCe,mBAAmB,KAAK,IAAlE,EAAyE;AAExE,WAAKF,SAAL,CAAeE,mBAAf,GAAqCA,mBAArC;AAEA;AACD,GAlHqB;;AAoHtB;;;;;;;;;AASAoB,EAAAA,aAAa,EAAE,UAAWrB,eAAX,EAA4BsB,WAA5B,EAAyCC,eAAzC,EAA2D;AACzE,QAAKvB,eAAe,KAAKd,SAApB,IAAiCc,eAAe,KAAK,IAA1D,EAAiE;AAEhE,WAAKD,SAAL,CAAeC,eAAf,GAAiCA,eAAjC;AAEA;;AACD,SAAKG,YAAL,CAAkBkB,aAAlB,CAAiCrB,eAAjC,EAAkDsB,WAAlD;;AACA,SAAKpB,eAAL,CAAqBmB,aAArB,CAAoCE,eAApC;AACA,GArIqB;;AAuItB;;;;;;;;AAQAC,EAAAA,WAAW,EAAE,UAAWC,IAAX,EAAiBC,IAAjB,EAAuBC,cAAvB,EAAwC;AACpD,QAAIC,OAAO,GAAGF,IAAI,GAAGA,IAAH,GAAU,EAA5B;AACA,QAAIG,KAAK,GAAG;AACXC,MAAAA,MAAM,EAAE;AACPL,QAAAA,IAAI,EAAEA,IADC;AAEPnC,QAAAA,SAAS,EAAE,KAAKA,SAFT;AAGPC,QAAAA,UAAU,EAAE,KAAKA,UAHV;AAIPmC,QAAAA,IAAI,EAAEE,OAJC;AAKPD,QAAAA,cAAc,EAAEA;AALT;AADG,KAAZ;;AASA,QAAK,KAAK5B,SAAL,CAAeC,eAApB,EAAsC;AAErC,WAAKD,SAAL,CAAeC,eAAf,CAAgC6B,KAAhC;AAEA;;AACD,QAAK,KAAK1C,OAAL,CAAaC,OAAb,IAAwB,KAAKD,OAAL,CAAaE,KAA1C,EAAkD;AAEjDgB,MAAAA,OAAO,CAAC0B,GAAR,CAAaH,OAAb;AAEA;AACD,GApKqB;;AAsKtB;;;;;;AAMAI,EAAAA,QAAQ,EAAE,UAAWC,YAAX,EAA0B;AACnC,QAAK,KAAKlC,SAAL,CAAeE,mBAApB,EAA0C;AAEzC,WAAKF,SAAL,CAAeE,mBAAf,CAAoCgC,YAApC;AAEA;;AACD,QAAK,KAAK9C,OAAL,CAAaC,OAAb,IAAwB,KAAKD,OAAL,CAAaE,KAA1C,EAAkD;AAEjDgB,MAAAA,OAAO,CAAC0B,GAAR,CAAaE,YAAb;AAEA;AAED,GAxLqB;;AA0LtB;;;;;;;;;AASAC,EAAAA,IAAI,EAAE,UAAWC,GAAX,EAAgBC,MAAhB,EAAwBC,kBAAxB,EAA4CC,OAA5C,EAAqDhB,WAArD,EAAmE;AACxE,QAAIiB,KAAK,GAAG,IAAZ;;AACA,QAAKD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKpD,SAArC,EAAiD;AAEhDoD,MAAAA,OAAO,GAAG,UAAWT,KAAX,EAAmB;AAE5B,YAAII,YAAY,GAAGJ,KAAnB;;AACA,YAAKA,KAAK,CAACW,aAAN,IAAuBX,KAAK,CAACW,aAAN,CAAoBC,UAApB,KAAmC,IAA/D,EAAsE;AAEpER,UAAAA,YAAY,GAAG,6CAA6CJ,KAAK,CAACW,aAAN,CAAoBE,WAAjE,GAA+E,YAA/E,GAA8Fb,KAAK,CAACW,aAAN,CAAoBC,UAAjI;AAED;;AACDF,QAAAA,KAAK,CAACP,QAAN,CAAgBC,YAAhB;AAEA,OAVD;AAYA;;AACD,QAAK,CAAEE,GAAP,EAAa;AAEZG,MAAAA,OAAO,CAAE,kDAAF,CAAP;AAEA;;AACD,QAAIK,OAAO,GAAG,IAAIC,GAAJ,CAAST,GAAT,EAAcU,MAAM,CAACC,QAAP,CAAgBC,IAA9B,EAAqCA,IAAnD;AACA,QAAIC,QAAQ,GAAGL,OAAf;AACA,QAAIM,QAAQ,GAAGN,OAAO,CAACO,KAAR,CAAe,GAAf,CAAf;;AACA,QAAKD,QAAQ,CAACE,MAAT,GAAkB,CAAvB,EAA2B;AAE1BH,MAAAA,QAAQ,GAAGC,QAAQ,CAAEA,QAAQ,CAACE,MAAT,GAAkB,CAApB,CAAnB;AACA,UAAIC,YAAY,GAAGH,QAAQ,CAACI,KAAT,CAAgB,CAAhB,EAAmBJ,QAAQ,CAACE,MAAT,GAAkB,CAArC,EAAyCG,IAAzC,CAA+C,GAA/C,IAAuD,GAA1E;AACA,UAAKF,YAAY,KAAKlE,SAAjB,IAA8BkE,YAAY,KAAK,IAApD,EAA2D,KAAK5D,IAAL,GAAY4D,YAAZ;AAE3D;;AACD,QAAKf,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAKnD,SAA3D,EAAuE;AAEtE,UAAIqE,iBAAiB,GAAG,CAAxB;AACA,UAAI5B,cAAc,GAAG,CAArB;;AACAU,MAAAA,kBAAkB,GAAG,UAAWR,KAAX,EAAmB;AACvC,YAAK,CAAEA,KAAK,CAAC2B,gBAAb,EAAgC;AAEhC7B,QAAAA,cAAc,GAAGE,KAAK,CAAC4B,MAAN,GAAe5B,KAAK,CAAC6B,KAAtC;;AACA,YAAK/B,cAAc,GAAG4B,iBAAtB,EAA0C;AAEzCA,UAAAA,iBAAiB,GAAG5B,cAApB;AACA,cAAIgC,MAAM,GAAG,kBAAkBxB,GAAlB,GAAwB,KAAxB,GAAgC,CAACR,cAAc,GAAG,GAAlB,EAAuBiC,OAAvB,CAAgC,CAAhC,CAAhC,GAAsE,GAAnF;;AACArB,UAAAA,KAAK,CAACf,WAAN,CAAmB,cAAnB,EAAmCmC,MAAnC,EAA2ChC,cAA3C;AAEA;AACD,OAXD;AAaA;;AACD,SAAKN,aAAL,CAAoB,IAApB,EAA0BC,WAA1B,EAAuC,IAAvC;;AACA,QAAIuC,gBAAgB,GAAG,UAAWC,OAAX,EAAqB;AAC3C1B,MAAAA,MAAM,CAAEG,KAAK,CAACwB,KAAN,CAAaD,OAAb,CAAF,CAAN;AACA,KAFD;;AAGA,QAAIE,UAAU,GAAG,IAAIrF,UAAJ,CAAgB,KAAKM,OAArB,CAAjB;AACA+E,IAAAA,UAAU,CAACrD,OAAX,CAAoB,KAAKnB,IAAL,IAAa,KAAKC,YAAtC;AACAuE,IAAAA,UAAU,CAACC,eAAX,CAA4B,aAA5B;AACAD,IAAAA,UAAU,CAAC9B,IAAX,CAAiBc,QAAjB,EAA2Ba,gBAA3B,EAA6CxB,kBAA7C,EAAiEC,OAAjE;AACA,GA7PqB;;AA+PtB;;;;;AAKAyB,EAAAA,KAAK,EAAE,UAAWD,OAAX,EAAqB;AAC3B;AACA,QAAKA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK5E,SAArC,EAAiD;AAEhD,YAAM,mFAAN;AAEA;;AACD,QAAK,KAAKC,OAAL,CAAaC,OAAlB,EAA4B;AAE3BiB,MAAAA,OAAO,CAAC6D,IAAR,CAAc,sBAAsB,KAAK5E,SAAzC;AAEA;;AACD,QAAI6E,MAAM,GAAG,IAAItF,MAAJ,EAAb;AACAsF,IAAAA,MAAM,CAAC1D,UAAP,CAAmB,KAAKtB,OAAL,CAAaC,OAAhC,EAAyC,KAAKD,OAAL,CAAaE,KAAtD;AACA8E,IAAAA,MAAM,CAACjD,4BAAP,CAAqC,KAAKtB,yBAA1C;AACAuE,IAAAA,MAAM,CAAChD,aAAP,CAAsB,KAAKtB,UAA3B;AACAsE,IAAAA,MAAM,CAACnD,aAAP,CAAsB,KAAKtB,UAA3B;AACAyE,IAAAA,MAAM,CAAClD,mBAAP,CAA4B,KAAKtB,gBAAjC,EAjB2B,CAkB3B;;AACAwE,IAAAA,MAAM,CAACC,YAAP,CAAqB,KAAKlE,eAAL,CAAqBmE,YAArB,EAArB;AAEA,QAAI9B,KAAK,GAAG,IAAZ;;AACA,QAAI+B,YAAY,GAAG,UAAWC,OAAX,EAAqB;AAEvC,UAAKA,OAAO,CAACC,GAAR,KAAgB,MAArB,EAA8B;;AAE9B,UAAKD,OAAO,CAAC9C,IAAR,KAAiB,MAAtB,EAA+B;AAE9B,YAAIgD,MAAM,GAAGlC,KAAK,CAACpC,YAAN,CAAmBuE,WAAnB,CAAgCH,OAAhC,CAAb;;AACA,aAAM,IAAII,IAAV,IAAkBF,MAAlB,EAA2B;AAC1BlC,UAAAA,KAAK,CAACzC,YAAN,CAAmB8E,GAAnB,CAAwBD,IAAxB;AACA;AAED,OAPD,MAOO,IAAKJ,OAAO,CAAC9C,IAAR,KAAiB,UAAtB,EAAmC;AAEzCc,QAAAA,KAAK,CAACrC,eAAN,CAAsB2E,mBAAtB,CAA2CN,OAA3C;AAEA;AACD,KAhBD;;AAiBA,QAAIO,gBAAgB,GAAG,UAAWpD,IAAX,EAAiBC,cAAjB,EAAkC;AACxDY,MAAAA,KAAK,CAACf,WAAN,CAAmB,eAAnB,EAAoCE,IAApC,EAA0CC,cAA1C;AACA,KAFD;;AAGA,QAAIoD,aAAa,GAAG,UAAWnD,OAAX,EAAqB;AACxCW,MAAAA,KAAK,CAACP,QAAN,CAAgBJ,OAAhB;AACA,KAFD;;AAGAuC,IAAAA,MAAM,CAACa,2BAAP,CAAoCV,YAApC;AACAH,IAAAA,MAAM,CAACc,qBAAP,CAA8BH,gBAA9B;AACAX,IAAAA,MAAM,CAACe,kBAAP,CAA2BH,aAA3B;;AACA,QAAKjB,OAAO,YAAYqB,WAAnB,IAAkCrB,OAAO,YAAYsB,UAA1D,EAAuE;AAEtE,UAAK,KAAKjG,OAAL,CAAaC,OAAlB,EAA4BiB,OAAO,CAACC,IAAR,CAAc,wBAAd;AAC5B6D,MAAAA,MAAM,CAACJ,KAAP,CAAcD,OAAd;AAEA,KALD,MAKO,IAAK,OAAQA,OAAR,KAAsB,QAAtB,IAAkCA,OAAO,YAAYuB,MAA1D,EAAmE;AAEzE,UAAK,KAAKlG,OAAL,CAAaC,OAAlB,EAA4BiB,OAAO,CAACC,IAAR,CAAc,iBAAd;AAC5B6D,MAAAA,MAAM,CAACmB,SAAP,CAAkBxB,OAAlB;AAEA,KALM,MAKA;AAENvB,MAAAA,KAAK,CAACP,QAAN,CAAgB,yEAAhB;AAEA;;AACD,QAAK,KAAK7C,OAAL,CAAaC,OAAlB,EAA4B;AAE3BiB,MAAAA,OAAO,CAACkF,OAAR,CAAiB,sBAAsB,KAAKjG,SAA5C;AAEA;;AACD,WAAO,KAAKQ,YAAZ;AACA;AAzUqB,CAAvB;AA4UA,SAASd,UAAT","sourcesContent":["/**\n * @author Kai Salmen / https://kaisalmen.de\n * Development repository: https://github.com/kaisalmen/WWOBJLoader\n */\n\nimport {\n\tDefaultLoadingManager,\n\tFileLoader,\n\tGroup\n} from \"../../../build/three.module.js\";\n\nimport { Parser } from \"./worker/independent/OBJLoader2Parser.js\";\nimport { MeshReceiver } from \"./shared/MeshReceiver.js\";\nimport { MaterialHandler } from \"./shared/MaterialHandler.js\";\n\n/**\n * Use this class to load OBJ data from files or to parse OBJ data from an arraybuffer\n * @class\n *\n * @param {DefaultLoadingManager} [manager] The loadingManager for the loader to use. Default is {@link DefaultLoadingManager}\n */\nconst OBJLoader2 = function ( manager ) {\n\tthis.manager = ( manager !== undefined && manager !== null ) ? manager : DefaultLoadingManager;\n\tthis.logging = {\n\t\tenabled: true,\n\t\tdebug: false\n\t};\n\n\tthis.modelName = '';\n\tthis.instanceNo = 0;\n\tthis.path = undefined;\n\tthis.resourcePath = undefined;\n\tthis.useIndices = false;\n\tthis.disregardNormals = false;\n\tthis.materialPerSmoothingGroup = false;\n\tthis.useOAsMesh = false;\n\tthis.baseObject3d = new Group();\n\n\tthis.callbacks = {\n\t\tonParseProgress: undefined,\n\t\tgenericErrorHandler: undefined\n\t};\n\n\tthis.materialHandler = new MaterialHandler();\n\tthis.meshReceiver = new MeshReceiver( this.materialHandler );\n};\nOBJLoader2.OBJLOADER2_VERSION = '3.0.0-beta';\nconsole.info( 'Using OBJLoader2 version: ' + OBJLoader2.OBJLOADER2_VERSION );\n\n\nOBJLoader2.prototype = {\n\n\tconstructor: OBJLoader2,\n\n\t/**\n\t * Enable or disable logging in general (except warn and error), plus enable or disable debug logging.\n\t *\n\t * @param {boolean} enabled True or false.\n\t * @param {boolean} debug True or false.\n\t */\n\tsetLogging: function ( enabled, debug ) {\n\t\tthis.logging.enabled = enabled === true;\n\t\tthis.logging.debug = debug === true;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Set the name of the model.\n\t *\n\t * @param {string} modelName\n\t */\n\tsetModelName: function ( modelName ) {\n\t\tthis.modelName = modelName ? modelName : this.modelName;\n\t\treturn this;\n\t},\n\n\t/**\n\t * The URL of the base path.\n\t *\n\t * @param {string} path URL\n\t */\n\tsetPath: function ( path ) {\n\t\tthis.path = path ? path : this.path;\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Allow to specify resourcePath for dependencies of specified resource.\n\t * @param {string} resourcePath\n\t */\n\tsetResourcePath: function ( resourcePath ) {\n\t\tthis.resourcePath = resourcePath ? resourcePath : this.resourcePath;\n\t},\n\n\t/**\n\t * Set the node where the loaded objects will be attached directly.\n\t *\n\t * @param {Object3D} baseObject3d Object already attached to scenegraph where new meshes will be attached to\n\t */\n\tsetBaseObject3d: function ( baseObject3d ) {\n\t\tthis.baseObject3d = ( baseObject3d === undefined || baseObject3d === null ) ? this.baseObject3d : baseObject3d;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Add materials as associated array.\n\t *\n\t * @param materials Object with named {@link Material}\n\t */\n\taddMaterials: function ( materials ) {\n\t\tthis.materialHandler.addMaterials( materials );\n\t},\n\n\t/**\n\t * Instructs loaders to create indexed {@link BufferGeometry}.\n\t *\n\t * @param {boolean} useIndices=false\n\t */\n\tsetUseIndices: function ( useIndices ) {\n\t\tthis.useIndices = useIndices === true;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Tells whether normals should be completely disregarded and regenerated.\n\t *\n\t * @param {boolean} disregardNormals=false\n\t */\n\tsetDisregardNormals: function ( disregardNormals ) {\n\t\tthis.disregardNormals = disregardNormals === true;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Tells whether a material shall be created per smoothing group.\n\t *\n\t * @param {boolean} materialPerSmoothingGroup=false\n\t */\n\tsetMaterialPerSmoothingGroup: function ( materialPerSmoothingGroup ) {\n\t\tthis.materialPerSmoothingGroup = materialPerSmoothingGroup === true;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Usually 'o' is meta-information and does not result in creation of new meshes, but mesh creation on occurrence of \"o\" can be enforced.\n\t *\n\t * @param {boolean} useOAsMesh=false\n\t */\n\tsetUseOAsMesh: function ( useOAsMesh ) {\n\t\tthis.useOAsMesh = useOAsMesh === true;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Register an generic error handler that is called if available instead of throwing an exception\n\t * @param {Function} genericErrorHandler\n\t */\n\tsetGenericErrorHandler: function ( genericErrorHandler ) {\n\t\tif ( genericErrorHandler !== undefined && genericErrorHandler !== null ) {\n\n\t\t\tthis.callbacks.genericErrorHandler = genericErrorHandler;\n\n\t\t}\n\t},\n\n\t/**\n\t *\n\t * @private\n\t *\n\t * @param {Function} [onParseProgress]\n\t * @param {Function} [onMeshAlter]\n\t * @param {Function} [onLoadMaterials]\n\t * @private\n\t */\n\t_setCallbacks: function ( onParseProgress, onMeshAlter, onLoadMaterials ) {\n\t\tif ( onParseProgress !== undefined && onParseProgress !== null ) {\n\n\t\t\tthis.callbacks.onParseProgress = onParseProgress;\n\n\t\t}\n\t\tthis.meshReceiver._setCallbacks( onParseProgress, onMeshAlter );\n\t\tthis.materialHandler._setCallbacks( onLoadMaterials );\n\t},\n\n\t/**\n\t * Announce feedback which is give to the registered callbacks.\n\t * @private\n\t *\n\t * @param {string} type The type of event\n\t * @param {string} text Textual description of the event\n\t * @param {number} numericalValue Numerical value describing the progress\n\t */\n\t_onProgress: function ( type, text, numericalValue ) {\n\t\tlet message = text ? text : '';\n\t\tlet event = {\n\t\t\tdetail: {\n\t\t\t\ttype: type,\n\t\t\t\tmodelName: this.modelName,\n\t\t\t\tinstanceNo: this.instanceNo,\n\t\t\t\ttext: message,\n\t\t\t\tnumericalValue: numericalValue\n\t\t\t}\n\t\t};\n\t\tif ( this.callbacks.onParseProgress ) {\n\n\t\t\tthis.callbacks.onParseProgress( event );\n\n\t\t}\n\t\tif ( this.logging.enabled && this.logging.debug ) {\n\n\t\t\tconsole.log( message );\n\n\t\t}\n\t},\n\n\t/**\n\t * Announce error feedback which is given to the generic error handler to the registered callbacks.\n\t * @private\n\t *\n\t * @param {String} errorMessage The event containing the error\n\t */\n\t_onError: function ( errorMessage ) {\n\t\tif ( this.callbacks.genericErrorHandler ) {\n\n\t\t\tthis.callbacks.genericErrorHandler( errorMessage );\n\n\t\t}\n\t\tif ( this.logging.enabled && this.logging.debug ) {\n\n\t\t\tconsole.log( errorMessage );\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Use this convenient method to load a file at the given URL. By default the fileLoader uses an ArrayBuffer.\n\t *\n\t * @param {string}  url A string containing the path/URL of the file to be loaded.\n\t * @param {function} onLoad A function to be called after loading is successfully completed. The function receives loaded Object3D as an argument.\n\t * @param {function} [onFileLoadProgress] A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and Integer bytes.\n\t * @param {function} [onError] A function to be called if an error occurs during loading. The function receives the error as an argument.\n\t * @param {function} [onMeshAlter] Called after worker successfully delivered a single mesh\n\t */\n\tload: function ( url, onLoad, onFileLoadProgress, onError, onMeshAlter ) {\n\t\tlet scope = this;\n\t\tif ( onError === null || onError === undefined ) {\n\n\t\t\tonError = function ( event ) {\n\n\t\t\t\tlet errorMessage = event;\n\t\t\t\tif ( event.currentTarget && event.currentTarget.statusText !== null ) {\n\n\t\t\t\t\t errorMessage = 'Error occurred while downloading!\\nurl: ' + event.currentTarget.responseURL + '\\nstatus: ' + event.currentTarget.statusText;\n\n\t\t\t\t}\n\t\t\t\tscope._onError( errorMessage );\n\n\t\t\t};\n\n\t\t}\n\t\tif ( ! url ) {\n\n\t\t\tonError( 'An invalid url was provided. Unable to continue!' );\n\n\t\t}\n\t\tlet urlFull = new URL( url, window.location.href ).href;\n\t\tlet filename = urlFull;\n\t\tlet urlParts = urlFull.split( '/' );\n\t\tif ( urlParts.length > 2 ) {\n\n\t\t\tfilename = urlParts[ urlParts.length - 1 ];\n\t\t\tlet urlPartsPath = urlParts.slice( 0, urlParts.length - 1 ).join( '/' ) + '/';\n\t\t\tif ( urlPartsPath !== undefined && urlPartsPath !== null ) this.path = urlPartsPath;\n\n\t\t}\n\t\tif ( onFileLoadProgress === null || onFileLoadProgress === undefined ) {\n\n\t\t\tlet numericalValueRef = 0;\n\t\t\tlet numericalValue = 0;\n\t\t\tonFileLoadProgress = function ( event ) {\n\t\t\t\tif ( ! event.lengthComputable ) return;\n\n\t\t\t\tnumericalValue = event.loaded / event.total;\n\t\t\t\tif ( numericalValue > numericalValueRef ) {\n\n\t\t\t\t\tnumericalValueRef = numericalValue;\n\t\t\t\t\tlet output = 'Download of \"' + url + '\": ' + (numericalValue * 100).toFixed( 2 ) + '%';\n\t\t\t\t\tscope._onProgress( 'progressLoad', output, numericalValue );\n\n\t\t\t\t}\n\t\t\t};\n\n\t\t}\n\t\tthis._setCallbacks( null, onMeshAlter, null );\n\t\tlet fileLoaderOnLoad = function ( content ) {\n\t\t\tonLoad( scope.parse( content ) );\n\t\t};\n\t\tlet fileLoader = new FileLoader( this.manager );\n\t\tfileLoader.setPath( this.path || this.resourcePath );\n\t\tfileLoader.setResponseType( 'arraybuffer' );\n\t\tfileLoader.load( filename, fileLoaderOnLoad, onFileLoadProgress, onError );\n\t},\n\n\t/**\n\t * Parses OBJ data synchronously from arraybuffer or string.\n\t *\n\t * @param {arraybuffer|string} content OBJ data as Uint8Array or String\n\t */\n\tparse: function ( content ) {\n\t\t// fast-fail in case of illegal data\n\t\tif ( content === null || content === undefined ) {\n\n\t\t\tthrow 'Provided content is not a valid ArrayBuffer or String. Unable to continue parsing';\n\n\t\t}\n\t\tif ( this.logging.enabled ) {\n\n\t\t\tconsole.time( 'OBJLoader parse: ' + this.modelName );\n\n\t\t}\n\t\tlet parser = new Parser();\n\t\tparser.setLogging( this.logging.enabled, this.logging.debug );\n\t\tparser.setMaterialPerSmoothingGroup( this.materialPerSmoothingGroup );\n\t\tparser.setUseOAsMesh( this.useOAsMesh );\n\t\tparser.setUseIndices( this.useIndices );\n\t\tparser.setDisregardNormals( this.disregardNormals );\n\t\t// sync code works directly on the material references\n\t\tparser.setMaterials( this.materialHandler.getMaterials() );\n\n\t\tlet scope = this;\n\t\tlet onMeshLoaded = function ( payload ) {\n\n\t\t\tif ( payload.cmd !== 'data' ) return;\n\n\t\t\tif ( payload.type === 'mesh' ) {\n\n\t\t\t\tlet meshes = scope.meshReceiver.buildMeshes( payload );\n\t\t\t\tfor ( let mesh of meshes ) {\n\t\t\t\t\tscope.baseObject3d.add( mesh );\n\t\t\t\t}\n\n\t\t\t} else if ( payload.type === 'material' ) {\n\n\t\t\t\tscope.materialHandler.addPayloadMaterials( payload );\n\n\t\t\t}\n\t\t};\n\t\tlet onProgressScoped = function ( text, numericalValue ) {\n\t\t\tscope._onProgress( 'progressParse', text, numericalValue );\n\t\t};\n\t\tlet onErrorScoped = function ( message ) {\n\t\t\tscope._onError( message );\n\t\t};\n\t\tparser.setCallbackOnAssetAvailable( onMeshLoaded );\n\t\tparser.setCallbackOnProgress( onProgressScoped );\n\t\tparser.setCallbackOnError( onErrorScoped );\n\t\tif ( content instanceof ArrayBuffer || content instanceof Uint8Array ) {\n\n\t\t\tif ( this.logging.enabled ) console.info( 'Parsing arrayBuffer...' );\n\t\t\tparser.parse( content );\n\n\t\t} else if ( typeof( content ) === 'string' || content instanceof String ) {\n\n\t\t\tif ( this.logging.enabled ) console.info( 'Parsing text...' );\n\t\t\tparser.parseText( content );\n\n\t\t} else {\n\n\t\t\tscope._onError( 'Provided content was neither of type String nor Uint8Array! Aborting...' );\n\n\t\t}\n\t\tif ( this.logging.enabled ) {\n\n\t\t\tconsole.timeEnd( 'OBJLoader parse: ' + this.modelName );\n\n\t\t}\n\t\treturn this.baseObject3d;\n\t}\n};\n\nexport { OBJLoader2 };\n"]},"metadata":{},"sourceType":"module"}