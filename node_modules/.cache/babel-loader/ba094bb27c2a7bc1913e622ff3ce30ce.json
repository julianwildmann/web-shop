{"ast":null,"code":"/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ACESFilmicToneMapping, EventDispatcher, WebGLRenderer } from 'three';\nimport { IS_WEBXR_AR_CANDIDATE } from '../constants.js';\nimport { $tick } from '../model-viewer-base.js';\nimport { resolveDpr } from '../utilities.js';\nimport { ARRenderer } from './ARRenderer.js';\nimport TextureUtils from './TextureUtils.js';\nimport * as WebGLUtils from './WebGLUtils.js';\nexport const $arRenderer = Symbol('arRenderer');\n/**\n * Registers canvases with Canvas2DRenderingContexts and renders them\n * all in the same WebGLRenderingContext, spitting out textures to apply\n * to the canvases. Creates a fullscreen WebGL canvas that is not added\n * to the DOM, and on each frame, renders each registered canvas on a portion\n * of the WebGL canvas, and applies the texture on the registered canvas.\n *\n * In the future, can use ImageBitmapRenderingContext instead of\n * Canvas2DRenderingContext if supported for cheaper transfering of\n * the texture.\n */\n\nexport default class Renderer extends EventDispatcher {\n  constructor() {\n    super();\n    this.width = 0;\n    this.height = 0;\n    this.scenes = new Set();\n    const webGlOptions = {\n      alpha: false,\n      antialias: true\n    }; // Only enable certain options when Web XR capabilities are detected:\n\n    if (IS_WEBXR_AR_CANDIDATE) {\n      Object.assign(webGlOptions, {\n        alpha: true,\n        preserveDrawingBuffer: true\n      });\n    }\n\n    this.canvas = document.createElement('canvas'); // Need to support both 'webgl' and 'experimental-webgl' (IE11).\n\n    try {\n      this.context = WebGLUtils.getContext(this.canvas, webGlOptions); // Patch the gl context's extension functions before passing\n      // it to three.\n\n      WebGLUtils.applyExtensionCompatibility(this.context);\n      this.renderer = new WebGLRenderer({\n        canvas: this.canvas,\n        context: this.context\n      });\n      this.renderer.autoClear = false;\n      this.renderer.gammaOutput = true;\n      this.renderer.gammaFactor = 2.2;\n      this.renderer.physicallyCorrectLights = true;\n      this.renderer.setPixelRatio(resolveDpr()); // ACESFilmicToneMapping appears to be the most \"saturated\",\n      // and similar to Filament's gltf-viewer.\n\n      this.renderer.toneMapping = ACESFilmicToneMapping;\n    } catch (error) {\n      this.context = null;\n      console.warn(error);\n    }\n\n    this[$arRenderer] = ARRenderer.fromInlineRenderer(this);\n    this.textureUtils = this.canRender ? new TextureUtils(this.renderer, {\n      pmremSamples: 128\n    }) : null;\n    this.setRendererSize(1, 1);\n    this.lastTick = performance.now();\n  }\n\n  get canRender() {\n    return this.renderer != null && this.context != null;\n  }\n\n  setRendererSize(width, height) {\n    if (this.canRender) {\n      this.renderer.setSize(width, height, false);\n    }\n\n    this.width = width;\n    this.height = height;\n  }\n\n  registerScene(scene) {\n    this.scenes.add(scene);\n\n    if (this.canRender && this.scenes.size > 0) {\n      this.renderer.setAnimationLoop(time => this.render(time));\n    }\n  }\n\n  unregisterScene(scene) {\n    this.scenes.delete(scene);\n\n    if (this.canRender && this.scenes.size === 0) {\n      this.renderer.setAnimationLoop(null);\n    }\n  }\n\n  async supportsPresentation() {\n    return this.canRender && this[$arRenderer].supportsPresentation();\n  }\n\n  get presentedScene() {\n    return this[$arRenderer].presentedScene;\n  }\n\n  async present(scene) {\n    try {\n      return await this[$arRenderer].present(scene);\n    } catch (error) {\n      this[$arRenderer].stopPresenting();\n      throw error;\n    } finally {\n      // NOTE(cdata): Setting width and height to 0 will have the effect of\n      // invoking a `setSize` the next time we render in this renderer\n      this.width = this.height = 0;\n    }\n  }\n\n  stopPresenting() {\n    return this[$arRenderer].stopPresenting();\n  }\n\n  get isPresenting() {\n    return this[$arRenderer] != null && this[$arRenderer].isPresenting;\n  }\n\n  render(t) {\n    if (!this.canRender || this.isPresenting) {\n      return;\n    }\n\n    const delta = t - this.lastTick;\n    const dpr = resolveDpr();\n\n    if (dpr !== this.renderer.getPixelRatio()) {\n      this.renderer.setPixelRatio(dpr);\n    }\n\n    for (let scene of this.scenes) {\n      const element = scene.element,\n            width = scene.width,\n            height = scene.height,\n            context = scene.context;\n      element[$tick](t, delta);\n\n      if (!scene.isVisible || !scene.isDirty || scene.paused) {\n        continue;\n      }\n\n      const camera = scene.getCamera();\n\n      if (width > this.width || height > this.height) {\n        const maxWidth = Math.max(width, this.width);\n        const maxHeight = Math.max(height, this.height);\n        this.setRendererSize(maxWidth, maxHeight);\n      }\n\n      const exposure = scene.exposure;\n      const exposureIsNumber = typeof exposure === 'number' && !self.isNaN(exposure);\n      this.renderer.toneMappingExposure = exposureIsNumber ? exposure : 1.0; // Need to set the render target in order to prevent\n      // clearing the depth from a different buffer -- possibly\n      // from something in\n\n      this.renderer.setRenderTarget(null);\n      this.renderer.clearDepth();\n      this.renderer.setViewport(0, 0, width, height);\n      this.renderer.render(scene, camera);\n      const widthDPR = width * dpr;\n      const heightDPR = height * dpr;\n      context.drawImage(this.renderer.domElement, 0, this.canvas.height - heightDPR, widthDPR, heightDPR, 0, 0, widthDPR, heightDPR);\n      scene.isDirty = false;\n    }\n\n    this.lastTick = t;\n  }\n\n  dispose() {\n    if (this.textureUtils != null) {\n      this.textureUtils.dispose();\n    }\n\n    if (this.renderer != null) {\n      this.renderer.dispose();\n    }\n\n    this.textureUtils = null;\n    this.renderer = null;\n    this.scenes.clear();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}