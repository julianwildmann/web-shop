{"ast":null,"code":"/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const assertContext = context => {\n  if (context == null) {\n    throw new Error('WebGL is not available!');\n  }\n\n  return context;\n};\nexport const getContext = (canvas, options) => assertContext(canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options));\n/**\n * Patch the values reported by WebGLRenderingContext's\n * extension store to fix compatibility issues.\n */\n\nexport const applyExtensionCompatibility = gl => {\n  const testShaders = {\n    // In some Firefox builds (mobile Android on Pixel at least),\n    // EXT_shader_texture_lod is reported as being supported, but\n    // fails in practice.\n    // @see https://bugzilla.mozilla.org/show_bug.cgi?id=1451287\n    'EXT_shader_texture_lod': \"\\n      #extension GL_EXT_shader_texture_lod : enable\\n      precision mediump float;\\n      uniform sampler2D tex;\\n      void main() {\\n        gl_FragColor = texture2DLodEXT(tex, vec2(0.0, 0.0), 0.0);\\n      }\"\n  };\n\n  function confirmExtension(gl, name) {\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(shader, testShaders[name]);\n    gl.compileShader(shader);\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    gl.deleteShader(shader);\n    return status;\n  }\n\n  const getExtension = gl.getExtension;\n\n  gl.getExtension = name => {\n    let extension;\n\n    if (testShaders[name]) {\n      extension = getExtension.call(gl, name);\n\n      if (extension && !confirmExtension(gl, name)) {\n        extension = null;\n      }\n    } else {\n      extension = getExtension.call(gl, name);\n    }\n\n    return extension;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}