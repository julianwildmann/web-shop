{"ast":null,"code":"import _slicedToArray from \"/Users/julianwildmann/Documents/01_Studium/LMU/04_Master_Thesis/Repository/online-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Math as ThreeMath } from 'three';\nimport { parseValues } from './parsers.js';\n/**\n * Converts a length-like ValueNode to meters expressed as a number. Currently,\n * only ValueNodes that represent a metric value (m, cm, mm) are supported.\n *\n * If no unit is specified, assumes meters. Returns 0 for a ValueNode that\n * cannot be parsed.\n */\n\nconst lengthValueNodeToMeters = lengthValueNode => {\n  const value = parseFloat(lengthValueNode.value);\n\n  if (self.isNaN(value)) {\n    return 0;\n  }\n\n  let scale;\n\n  switch (lengthValueNode.unit) {\n    default:\n    case 'm':\n      scale = 1;\n      break;\n\n    case 'cm':\n      scale = 1 / 100;\n      break;\n\n    case 'mm':\n      scale = 1 / 1000;\n      break;\n  }\n\n  return value * scale;\n};\n/**\n * Converts an angle-like ValueNode to radians expressed as a number. Currently,\n * only ValueNodes that represent an angle expressed in degrees (deg) or radians\n * (rad) are supported.\n *\n * Assumes radians if unit is not specified or recognized. Returns 0 for a\n * ValueNode that cannot be parsed.\n */\n\n\nconst convertAngleValueNode = (angleValueNode, desiredUnits = 'rad') => {\n  const value = parseFloat(angleValueNode.value);\n\n  if (self.isNaN(value)) {\n    return 0;\n  }\n\n  const inputUnits = angleValueNode.unit;\n  return inputUnits === 'deg' ? desiredUnits === 'deg' ? value : ThreeMath.degToRad(value) : desiredUnits === 'deg' ? ThreeMath.radToDeg(value) : value;\n};\n/**\n * Spherical String => Spherical Values\n *\n * Converts a \"spherical string\" to values suitable for assigning to a Three.js\n * Spherical object. Position strings are of the form \"$theta $phi $radius\".\n * Accepted units for theta and phi are radians (rad) and degrees (deg).\n * Accepted units for radius include meters (m), centimeters (cm) and\n * millimeters (mm), or auto. If radius is set to auto, it implies that the\n * consumer of the deserialized values has some idealized notion of the radius\n * that should be applied.\n *\n * Returns null if the spherical string cannot be parsed.\n */\n\n\nexport const deserializeSpherical = sphericalString => {\n  try {\n    const sphericalValueNodes = parseValues(sphericalString);\n\n    if (sphericalValueNodes.length === 3) {\n      const _sphericalValueNodes = _slicedToArray(sphericalValueNodes, 3),\n            thetaNode = _sphericalValueNodes[0],\n            phiNode = _sphericalValueNodes[1],\n            radiusNode = _sphericalValueNodes[2];\n\n      const theta = convertAngleValueNode(thetaNode);\n      const phi = convertAngleValueNode(phiNode);\n      const radius = radiusNode.value === 'auto' ? 'auto' : lengthValueNodeToMeters(radiusNode);\n      return [theta, phi, radius];\n    }\n  } catch (_error) {}\n\n  return null;\n};\nexport const deserializeAngleToDeg = angleString => {\n  try {\n    const angleValueNode = parseValues(angleString);\n\n    if (angleValueNode.length === 1) {\n      return convertAngleValueNode(angleValueNode[0], 'deg');\n    }\n  } catch (_error) {}\n\n  return null;\n};\n/**\n * For our purposes, an enumeration is a fixed set of CSS-expression-compatible\n * names. When serialized, a selected subset of the members may be specified as\n * whitespace-separated strings. An enumeration deserializer is a function that\n * parses a serialized subset of an enumeration and returns any members that are\n * found as a Set.\n *\n * The following example will produce a deserializer for the days of the\n * week:\n *\n * const deserializeDaysOfTheWeek = enumerationDeserializer([\n *   'Monday',\n *   'Tuesday',\n *   'Wednesday',\n *   'Thursday',\n *   'Friday',\n *   'Saturday',\n *   'Sunday'\n * ]);\n */\n\nexport const enumerationDeserializer = allowedNames => valueString => {\n  try {\n    const names = parseValues(valueString).map(valueNode => valueNode.value).filter(name => allowedNames.indexOf(name) > -1); // NOTE(cdata): IE11 does not support constructing a Set directly from\n    // an iterable, so we need to manually add all the items:\n\n    const result = new Set();\n\n    for (const name of names) {\n      result.add(name);\n    }\n\n    return result;\n  } catch (_error) {}\n\n  return new Set();\n};","map":null,"metadata":{},"sourceType":"module"}