{"ast":null,"code":"/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AnimationMixer, Box3, Object3D, Vector3 } from 'three';\nimport { CachingGLTFLoader } from './CachingGLTFLoader.js';\nconst $cancelPendingSourceChange = Symbol('cancelPendingSourceChange');\n/**\n * An Object3D that can swap out its underlying\n * model.\n *\n * @extends THREE.Object3D\n */\n\nexport default class Model extends Object3D {\n  /**\n   * Creates a model.\n   */\n  constructor() {\n    super();\n    this.loader = new CachingGLTFLoader();\n    this.mixer = new AnimationMixer(null);\n    this.animations = [];\n    this.animationsByName = new Map();\n    this.currentAnimationAction = null;\n    this.modelContainer = new Object3D();\n    this.animationNames = [];\n    this.boundingBox = new Box3();\n    this.size = new Vector3();\n    this.userData = {\n      url: null\n    };\n    this.url = null;\n    this.name = 'Model';\n    this.modelContainer.name = 'ModelContainer';\n    this.add(this.modelContainer);\n  }\n  /**\n   * Returns a boolean indicating whether or not there is a\n   * loaded model attached.\n   *\n   * @return {Boolean}\n   */\n\n\n  hasModel() {\n    return !!this.modelContainer.children.length;\n  }\n\n  applyEnvironmentMap(map) {\n    // Note that unlit models (using MeshBasicMaterial) should not apply\n    // an environment map, even though `map` is the currently configured\n    // environment map.\n    this.modelContainer.traverse(obj => {\n      // There are some cases where `obj.material` is\n      // an array of materials.\n      const mesh = obj;\n\n      if (Array.isArray(mesh.material)) {\n        for (let material of mesh.material) {\n          if (material.isMeshBasicMaterial) {\n            continue;\n          }\n\n          material.envMap = map;\n          material.needsUpdate = true;\n        }\n      } else if (mesh.material && !mesh.material.isMeshBasicMaterial) {\n        mesh.material.envMap = map;\n        mesh.material.needsUpdate = true;\n      }\n    });\n    this.dispatchEvent({\n      type: 'envmap-change',\n      value: map\n    });\n  }\n\n  setEnvironmentMapIntensity(intensity) {\n    const intensityIsNumber = typeof intensity === 'number' && !self.isNaN(intensity);\n\n    if (!intensityIsNumber) {\n      intensity = 1.0;\n    }\n\n    this.modelContainer.traverse(object => {\n      if (object && object.isMesh && object.material) {\n        const material = object.material;\n\n        if (Array.isArray(material)) {\n          material.forEach(material => material.envMapIntensity = intensity);\n        } else {\n          object.material.envMapIntensity = intensity;\n        }\n      }\n    });\n  }\n  /**\n   * Pass in a THREE.Object3D to be controlled\n   * by this model.\n   *\n   * @param {THREE.Object3D}\n   */\n\n\n  setObject(model) {\n    this.clear();\n    this.modelContainer.add(model);\n    this.updateBoundingBox();\n    this.dispatchEvent({\n      type: 'model-load'\n    });\n  }\n  /**\n   * @param {String?} url\n   * @param {Function?} progressCallback\n   */\n\n\n  async setSource(url, progressCallback) {\n    if (!url || url === this.url) {\n      if (progressCallback) {\n        progressCallback(1);\n      }\n\n      return;\n    } // If we have pending work due to a previous source change in progress,\n    // cancel it so that we do not incur a race condition:\n\n\n    if (this[$cancelPendingSourceChange] != null) {\n      this[$cancelPendingSourceChange]();\n      this[$cancelPendingSourceChange] = null;\n    }\n\n    this.url = url;\n    let scene = null;\n\n    try {\n      scene = await new Promise(async (resolve, reject) => {\n        this[$cancelPendingSourceChange] = () => reject();\n\n        try {\n          const result = await this.loader.load(url, progressCallback);\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      if (error == null) {\n        return;\n      }\n\n      throw error;\n    }\n\n    this.clear();\n\n    while (scene != null && scene.children.length) {\n      this.modelContainer.add(scene.children.shift());\n    }\n\n    this.modelContainer.traverse(obj => {\n      if (obj && obj.type === 'Mesh') {\n        obj.castShadow = true;\n      }\n    });\n    const animations = scene ? scene.userData.animations : [];\n    const animationsByName = new Map();\n    const animationNames = [];\n\n    for (const animation of animations) {\n      animationsByName.set(animation.name, animation);\n      animationNames.push(animation.name);\n    }\n\n    this.animations = animations;\n    this.animationsByName = animationsByName;\n    this.animationNames = animationNames;\n    this.userData.url = url;\n    this.updateBoundingBox();\n    this.dispatchEvent({\n      type: 'model-load',\n      url\n    });\n  }\n\n  set animationTime(value) {\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.time = value;\n    }\n  }\n\n  get animationTime() {\n    if (this.currentAnimationAction != null) {\n      return this.currentAnimationAction.time;\n    }\n\n    return 0;\n  }\n\n  get hasActiveAnimation() {\n    return this.currentAnimationAction != null;\n  }\n  /**\n   * Plays an animation if there are any associated with the current model.\n   * Accepts an optional string name of an animation to play. If no name is\n   * provided, or if no animation is found by the given name, always falls back\n   * to playing the first animation.\n   */\n\n\n  playAnimation(name = null, crossfadeTime = 0) {\n    const animations = this.animations;\n\n    if (animations == null || animations.length === 0) {\n      console.warn(\"Cannot play animation (model does not have any animations)\");\n      return;\n    }\n\n    let animationClip = null;\n\n    if (name != null) {\n      animationClip = this.animationsByName.get(name);\n    }\n\n    if (animationClip == null) {\n      animationClip = animations[0];\n    }\n\n    try {\n      const lastAnimationAction = this.currentAnimationAction;\n      this.currentAnimationAction = this.mixer.clipAction(animationClip, this).play();\n      this.currentAnimationAction.enabled = true;\n\n      if (lastAnimationAction != null && this.currentAnimationAction !== lastAnimationAction) {\n        this.currentAnimationAction.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  stopAnimation() {\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.stop();\n      this.currentAnimationAction.reset();\n      this.currentAnimationAction = null;\n    }\n\n    this.mixer.stopAllAction();\n  }\n\n  updateAnimation(step) {\n    this.mixer.update(step);\n  }\n\n  clear() {\n    this.url = null;\n    this.userData = {\n      url: null\n    }; // Remove all current children\n\n    while (this.modelContainer.children.length) {\n      this.modelContainer.remove(this.modelContainer.children[0]);\n    }\n\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.stop();\n      this.currentAnimationAction = null;\n    }\n\n    this.mixer.stopAllAction();\n    this.mixer.uncacheRoot(this);\n  }\n\n  updateBoundingBox() {\n    this.remove(this.modelContainer);\n    this.boundingBox.setFromObject(this.modelContainer);\n    this.boundingBox.getSize(this.size);\n    this.add(this.modelContainer);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}