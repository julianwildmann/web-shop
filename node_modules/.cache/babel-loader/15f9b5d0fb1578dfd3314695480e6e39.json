{"ast":null,"code":"/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BackSide, BoxBufferGeometry, CubeCamera, EventDispatcher, HalfFloatType, LinearMipMapLinearFilter, LinearToneMapping, Mesh, MeshBasicMaterial, MeshStandardMaterial, PointLight, RGBAFormat, Scene, ShaderMaterial } from 'three';\nconst rendererTextureCache = new Map();\nexport default class EnvironmentMapGenerator extends EventDispatcher {\n  constructor(renderer) {\n    super();\n    this.renderer = renderer;\n    this.scene = new Scene(); // Scene\n\n    const scene = this.scene;\n    scene.position.y = -3.5;\n    const geometry = new BoxBufferGeometry();\n    geometry.removeAttribute('uv');\n    const roomMaterial = new MeshStandardMaterial({\n      metalness: 0,\n      side: BackSide\n    });\n    const boxMaterial = new MeshStandardMaterial({\n      metalness: 0\n    });\n    const mainLight = new PointLight(0xffffff, 500.0, 28, 2);\n    mainLight.position.set(0.418, 16.199, 0.300);\n    scene.add(mainLight);\n    const room = new Mesh(geometry, roomMaterial);\n    room.position.set(-0.757, 13.219, 0.717);\n    room.scale.set(31.713, 28.305, 28.591);\n    scene.add(room);\n    const box1 = new Mesh(geometry, boxMaterial);\n    box1.position.set(-10.906, 2.009, 1.846);\n    box1.rotation.set(0, -0.195, 0);\n    box1.scale.set(2.328, 7.905, 4.651);\n    scene.add(box1);\n    const box2 = new Mesh(geometry, boxMaterial);\n    box2.position.set(-5.607, -0.754, -0.758);\n    box2.rotation.set(0, 0.994, 0);\n    box2.scale.set(1.970, 1.534, 3.955);\n    scene.add(box2);\n    const box3 = new Mesh(geometry, boxMaterial);\n    box3.position.set(6.167, 0.857, 7.803);\n    box3.rotation.set(0, 0.561, 0);\n    box3.scale.set(3.927, 6.285, 3.687);\n    scene.add(box3);\n    const box4 = new Mesh(geometry, boxMaterial);\n    box4.position.set(-2.017, 0.018, 6.124);\n    box4.rotation.set(0, 0.333, 0);\n    box4.scale.set(2.002, 4.566, 2.064);\n    scene.add(box4);\n    const box5 = new Mesh(geometry, boxMaterial);\n    box5.position.set(2.291, -0.756, -2.621);\n    box5.rotation.set(0, -0.286, 0);\n    box5.scale.set(1.546, 1.552, 1.496);\n    scene.add(box5);\n    const box6 = new Mesh(geometry, boxMaterial);\n    box6.position.set(-2.193, -0.369, -5.547);\n    box6.rotation.set(0, 0.516, 0);\n    box6.scale.set(3.875, 3.487, 2.986);\n    scene.add(box6); // -z right\n\n    const light1 = new Mesh(geometry, this.createAreaLightMaterial(50));\n    light1.position.set(-16.116, 14.37, 8.208);\n    light1.scale.set(0.1, 2.428, 2.739);\n    scene.add(light1); // -z left\n\n    const light2 = new Mesh(geometry, this.createAreaLightMaterial(50));\n    light2.position.set(-16.109, 18.021, -8.207);\n    light2.scale.set(0.1, 2.425, 2.751);\n    scene.add(light2); // +z\n\n    const light3 = new Mesh(geometry, this.createAreaLightMaterial(17));\n    light3.position.set(14.904, 12.198, -1.832);\n    light3.scale.set(0.15, 4.265, 6.331);\n    scene.add(light3); // +x\n\n    const light4 = new Mesh(geometry, this.createAreaLightMaterial(43));\n    light4.position.set(-0.462, 8.89, 14.520);\n    light4.scale.set(4.38, 5.441, 0.088);\n    scene.add(light4); // -x\n\n    const light5 = new Mesh(geometry, this.createAreaLightMaterial(20));\n    light5.position.set(3.235, 11.486, -12.541);\n    light5.scale.set(2.5, 2.0, 0.1);\n    scene.add(light5);\n    this.camera = new CubeCamera(0.1, 100, 256);\n    this.camera.renderTarget.texture.type = HalfFloatType;\n    this.camera.renderTarget.texture.format = RGBAFormat;\n    this.camera.renderTarget.texture.minFilter = LinearMipMapLinearFilter;\n    this.camera.renderTarget.texture.generateMipmaps = true; // Blur\n\n    this.blurScene = new Scene();\n    this.blurMaterial = new ShaderMaterial({\n      uniforms: {\n        tCube: {\n          value: null\n        }\n      },\n      vertexShader: \"\\n        varying vec3 vWorldDirection;\\n        #include <common>\\n        void main() {\\n          vWorldDirection = transformDirection( position, modelMatrix );\\n          #include <begin_vertex>\\n          #include <project_vertex>\\n          gl_Position.z = gl_Position.w;\\n        }\\n      \",\n      fragmentShader: \"\\n        uniform samplerCube tCube;\\n        varying vec3 vWorldDirection;\\n        void main() {\\n          vec4 texColor = textureCube( tCube, vec3( - vWorldDirection.x, vWorldDirection.yz ), 2.0 );\\n          gl_FragColor = mapTexelToLinear( texColor );\\n        }\\n      \",\n      side: BackSide,\n      depthTest: false,\n      depthWrite: false\n    });\n    this.blurScene.add(new Mesh(geometry, this.blurMaterial));\n    this.blurCamera = new CubeCamera(0.1, 100, 256);\n    this.blurCamera.renderTarget.texture.type = HalfFloatType;\n    this.blurCamera.renderTarget.texture.format = RGBAFormat;\n    this.blurCamera.renderTarget.texture.minFilter = LinearMipMapLinearFilter;\n    this.blurCamera.renderTarget.texture.generateMipmaps = true; //\n\n    this.blurRenderTarget1 = this.camera.renderTarget;\n    this.blurRenderTarget2 = this.blurCamera.renderTarget;\n  }\n\n  createAreaLightMaterial(intensity) {\n    const material = new MeshBasicMaterial();\n    material.color.setScalar(intensity);\n    return material;\n  }\n  /**\n   * Generate an environment map for a room.\n   */\n\n\n  generate() {\n    if (!rendererTextureCache.has(this.renderer)) {\n      this.camera.clear(this.renderer);\n      var gammaOutput = this.renderer.gammaOutput;\n      var toneMapping = this.renderer.toneMapping;\n      var toneMappingExposure = this.renderer.toneMappingExposure;\n      this.renderer.toneMapping = LinearToneMapping;\n      this.renderer.toneMappingExposure = 1.0;\n      this.renderer.gammaOutput = false;\n      this.camera.update(this.renderer, this.scene); // Blur\n\n      for (var i = 0; i < 16; i++) {\n        // Ping-Pong\n        if (i % 2 === 0) {\n          this.blurMaterial.uniforms.tCube.value = this.blurRenderTarget1.texture;\n          this.blurCamera.renderTarget = this.blurRenderTarget2;\n        } else {\n          this.blurMaterial.uniforms.tCube.value = this.blurRenderTarget2.texture;\n          this.blurCamera.renderTarget = this.blurRenderTarget1;\n        }\n\n        this.blurCamera.update(this.renderer, this.blurScene);\n      }\n\n      this.renderer.toneMapping = toneMapping;\n      this.renderer.toneMappingExposure = toneMappingExposure;\n      this.renderer.gammaOutput = gammaOutput;\n      rendererTextureCache.set(this.renderer, this.blurCamera.renderTarget.texture);\n    }\n\n    return rendererTextureCache.get(this.renderer);\n  }\n\n  dispose() {\n    this.camera.renderTarget.dispose();\n    this.blurRenderTarget1.dispose();\n    this.blurRenderTarget2.dispose();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}