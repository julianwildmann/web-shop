{"ast":null,"code":"/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\nimport { EventDispatcher } from 'three';\nimport { debounce, getFirstMapKey } from '../../utilities.js';\nexport const INITIAL_STATUS_ANNOUNCEMENT = 'This page includes one or more 3D models that are loading';\nexport const FINISHED_LOADING_ANNOUNCEMENT = 'All 3D models in the page have loaded';\nconst UPDATE_STATUS_DEBOUNCE_MS = 100;\nconst $modelViewerStatusInstance = Symbol('modelViewerStatusInstance');\nconst $updateStatus = Symbol('updateStatus');\n/**\n * The LoadingStatusAnnouncer manages announcements of loading status across\n * all <model-viewer> elements in the document at any given time. As new\n * <model-viewer> elements are connected to the document, they are registered\n * with a LoadingStatusAnnouncer singleton. As they are disconnected, the are\n * also unregistered. Announcements are made to indicate the following\n * conditions:\n *\n *  1. There are <model-viewer> elements that have yet to finish loading\n *  2. All <model-viewer> elements in the page have finished attempting to load\n */\n\nexport class LoadingStatusAnnouncer extends EventDispatcher {\n  constructor() {\n    super();\n    /**\n     * The \"status\" instance is the <model-viewer> instance currently designated\n     * to announce the loading status of all <model-viewer> elements in the\n     * document at any given time. It might change as <model-viewer> elements are\n     * attached or detached over time.\n     */\n\n    this[_a] = null;\n    this.registeredInstanceStatuses = new Map();\n    this.loadingPromises = [];\n    /**\n     * This element is a node that floats around the document as the status\n     * instance changes (see above). It is a singleton that represents the loading\n     * status for all <model-viewer> elements currently in the page. It has its\n     * role attribute set to \"status\", which causes screen readers to announce\n     * any changes to its text content.\n     *\n     * @see https://www.w3.org/TR/wai-aria-1.1/#status\n     */\n\n    this.statusElement = document.createElement('p');\n    this.statusUpdateInProgress = false;\n    this[_b] = debounce(() => this.updateStatus(), UPDATE_STATUS_DEBOUNCE_MS);\n    const statusElement = this.statusElement;\n    const style = statusElement.style;\n    statusElement.setAttribute('role', 'status');\n    style.position = 'absolute';\n    style.color = 'transparent';\n    style.top = style.left = style.margin = '0';\n    style.pointerEvents = 'none';\n  }\n  /**\n   * Register a <model-viewer> element with the announcer. If it is not yet\n   * loaded, its loading status will be tracked by the announcer.\n   */\n\n\n  registerInstance(modelViewer) {\n    if (this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    let onUnregistered = () => {};\n\n    const loadShouldBeMeasured = modelViewer.loaded === false && !!modelViewer.src;\n    const loadAttemptCompletes = new Promise(resolve => {\n      if (!loadShouldBeMeasured) {\n        resolve();\n        return;\n      }\n\n      const resolveHandler = () => {\n        resolve();\n        modelViewer.removeEventListener('load', resolveHandler);\n        modelViewer.removeEventListener('error', resolveHandler);\n      };\n\n      modelViewer.addEventListener('load', resolveHandler);\n      modelViewer.addEventListener('error', resolveHandler);\n      onUnregistered = resolveHandler;\n    });\n    this.registeredInstanceStatuses.set(modelViewer, {\n      onUnregistered\n    });\n    this.loadingPromises.push(loadAttemptCompletes);\n\n    if (this.modelViewerStatusInstance == null) {\n      this.modelViewerStatusInstance = modelViewer;\n    }\n  }\n  /**\n   * Unregister a <model-viewer> element with the announcer. Its loading status\n   * will no longer be tracked by the announcer.\n   */\n\n\n  unregisterInstance(modelViewer) {\n    if (!this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    const statuses = this.registeredInstanceStatuses;\n    const instanceStatus = statuses.get(modelViewer);\n    statuses.delete(modelViewer);\n    instanceStatus.onUnregistered();\n\n    if (this.modelViewerStatusInstance === modelViewer) {\n      this.modelViewerStatusInstance = statuses.size > 0 ? getFirstMapKey(statuses) : null;\n    }\n  }\n\n  get modelViewerStatusInstance() {\n    return this[$modelViewerStatusInstance];\n  }\n\n  set modelViewerStatusInstance(value) {\n    const currentInstance = this[$modelViewerStatusInstance];\n\n    if (currentInstance === value) {\n      return;\n    }\n\n    const statusElement = this.statusElement;\n\n    if (value != null && value.shadowRoot != null) {\n      value.shadowRoot.appendChild(statusElement);\n    } else if (statusElement.parentNode != null) {\n      statusElement.parentNode.removeChild(statusElement);\n    }\n\n    this[$modelViewerStatusInstance] = value;\n    this[$updateStatus]();\n  }\n\n  async updateStatus() {\n    if (this.statusUpdateInProgress || this.loadingPromises.length === 0) {\n      return;\n    }\n\n    this.statusElement.textContent = INITIAL_STATUS_ANNOUNCEMENT;\n    this.statusUpdateInProgress = true;\n    this.dispatchEvent({\n      type: 'initial-status-announced'\n    });\n\n    while (this.loadingPromises.length) {\n      const loadingPromises = this.loadingPromises;\n      this.loadingPromises = [];\n      await Promise.all(loadingPromises);\n    }\n\n    this.statusElement.textContent = FINISHED_LOADING_ANNOUNCEMENT;\n    this.statusUpdateInProgress = false;\n    this.dispatchEvent({\n      type: 'finished-loading-announced'\n    });\n  }\n\n}\n_a = $modelViewerStatusInstance, _b = $updateStatus;","map":null,"metadata":{},"sourceType":"module"}