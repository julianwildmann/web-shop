{"ast":null,"code":"/*\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { cloneGltf } from './ModelUtils.js';\nexport const loadWithLoader = (url, loader, progressCallback = () => {}) => {\n  const onProgress = event => {\n    progressCallback(event.loaded / event.total);\n  };\n\n  return new Promise((resolve, reject) => {\n    loader.load(url, resolve, onProgress, reject);\n  });\n};\nconst cache = new Map();\nconst preloaded = new Map();\nexport class CachingGLTFLoader {\n  constructor() {\n    this.loader = new GLTFLoader();\n  }\n\n  static get cache() {\n    return cache;\n  }\n\n  static clearCache() {\n    cache.clear();\n    preloaded.clear();\n  }\n\n  static has(url) {\n    return cache.has(url);\n  }\n  /**\n   * Returns true if the model that corresponds to the specified url is\n   * available in our local cache.\n   */\n\n\n  static hasFinishedLoading(url) {\n    return !!preloaded.get(url);\n  }\n  /**\n   * Preloads a glTF, populating the cache. Returns a promise that resolves\n   * when the cache is populated.\n   */\n\n\n  async preload(url, progressCallback = () => {}) {\n    if (!cache.has(url)) {\n      cache.set(url, loadWithLoader(url, this.loader, progress => {\n        progressCallback(progress * 0.9);\n      }));\n    }\n\n    await cache.get(url);\n\n    if (progressCallback) {\n      progressCallback(1.0);\n    }\n\n    preloaded.set(url, true);\n  }\n  /**\n   * Loads a glTF from the specified url and resolves a unique clone of the\n   * glTF. If the glTF has already been loaded, makes a clone of the cached\n   * copy.\n   */\n\n\n  async load(url, progressCallback = () => {}) {\n    await this.preload(url, progressCallback);\n    const gltf = cloneGltf((await cache.get(url)));\n    const model = gltf.scene ? gltf.scene : null;\n\n    if (model != null) {\n      model.userData.animations = gltf.animations; // save animations\n    }\n\n    return model;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}