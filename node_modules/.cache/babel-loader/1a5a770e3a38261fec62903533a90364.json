{"ast":null,"code":"/*\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit-element';\nimport { $needsRender, $scene, $tick, $onUserModelOrbit } from '../model-viewer-base.js';\nimport { Timer } from '../utilities.js';\nconst Alignment = {\n  CENTER: 'center',\n  ORIGIN: 'origin'\n}; // How much the model will rotate per\n// second in radians:\n\nconst ROTATION_SPEED = Math.PI / 32;\nconst AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION = 3000;\nconst UNBOUNDED_WHITESPACE_RE = /\\s+/;\n\nconst alignmentToMaskValues = alignmentString => {\n  const alignments = alignmentString.split(UNBOUNDED_WHITESPACE_RE);\n  const maskValues = [];\n  let firstAlignment;\n\n  for (let i = 0; i < 3; ++i) {\n    const alignment = alignments[i];\n\n    if (alignment != null && firstAlignment == null) {\n      firstAlignment = alignment;\n    }\n\n    switch (alignment || firstAlignment) {\n      default:\n      case Alignment.CENTER:\n        maskValues.push(1.0);\n        break;\n\n      case Alignment.ORIGIN:\n        maskValues.push(0.0);\n        break;\n    }\n  }\n\n  return maskValues;\n};\n\nconst $autoRotateTimer = Symbol('autoRotateTimer');\nconst $updateAlignment = Symbol('updateAlignment');\nexport { AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION };\nexport const StagingMixin = ModelViewerElement => {\n  class StagingModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super();\n      this.autoRotate = false;\n      this.alignModel = 'center';\n      this[$autoRotateTimer] = new Timer(AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION);\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this[$autoRotateTimer].stop();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this[$autoRotateTimer].stop();\n    }\n\n    updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('alignModel')) {\n        this[$updateAlignment]();\n      }\n\n      if (changedProperties.has('autoRotate')) {\n        this[$scene].pivot.rotation.set(0, 0, 0);\n        this[$needsRender]();\n      }\n    }\n\n    [$tick](time, delta) {\n      super[$tick](time, delta);\n\n      if (!this.autoRotate || !this.modelIsVisible) {\n        return;\n      }\n\n      this[$autoRotateTimer].tick(delta);\n\n      if (this[$autoRotateTimer].hasStopped) {\n        this[$scene].pivot.rotation.y += ROTATION_SPEED * delta * 0.001;\n        this[$needsRender]();\n      }\n    }\n\n    [$onUserModelOrbit]() {\n      super[$onUserModelOrbit]();\n\n      if (!this.autoRotate) {\n        return;\n      }\n\n      this[$autoRotateTimer].reset();\n    }\n\n    [$updateAlignment]() {\n      const alignModel = this.alignModel;\n      const alignmentMaskValues = alignmentToMaskValues(alignModel);\n      this[$scene].setModelAlignmentMask(...alignmentMaskValues);\n    }\n\n    get turntableRotation() {\n      return this[$scene].pivot.rotation.y;\n    }\n\n  }\n\n  __decorate([property({\n    type: Boolean,\n    attribute: 'auto-rotate'\n  })], StagingModelViewerElement.prototype, \"autoRotate\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'align-model'\n  })], StagingModelViewerElement.prototype, \"alignModel\", void 0);\n\n  return StagingModelViewerElement;\n};","map":null,"metadata":{},"sourceType":"module"}