{"ast":null,"code":"var _jsxFileName = \"/Users/julianwildmann/Documents/01_Studium/LMU/04_Master_Thesis/Repository/online-shop/src/components/Viewer.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OBJLoader from 'three-obj-loader';\nimport GLTFLoader from 'three-gltf-loader';\n\nconst OrbitControls = require(\"three-orbit-controls\")(THREE);\n/* class Viewer extends Component{\n\n\n  componentDidMount(){\n    const width = this.mount.clientWidth\n    const height = this.mount.clientHeight\n\n    //ADD SCENE\n    this.scene = new THREE.Scene()\n\n    //ADD CAMERA\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      width / height,\n      0.1,\n      1000\n    )\n    this.camera.position.z = 4\n\n    //ADD RENDERER\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    this.renderer.setClearColor('#888888')\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    //ADD CUBE\n    const loader = new GLTFLoader();\n      loader.load(\"/model.gltf\", (gltf) => {\n        this.scene.add(gltf.scene);\n      });\n\n    this.start();\n  }\n\ncomponentWillUnmount(){\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\nstart = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\nstop = () => {\n    cancelAnimationFrame(this.frameId)\n  }\nanimate = () => {\n   this.renderScene()\n   this.frameId = window.requestAnimationFrame(this.animate)\n }\n\nrenderScene = () => {\n  this.renderer.render(this.scene, this.camera)\n}\n\nrender(){\n    return(\n      <div\n        style={{ width: '800px', height: '800px' }}\n        ref={(mount) => { this.mount = mount }}\n      />\n    )\n  }\n}\n\n*/\n\n\nclass Viewer extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addGLTF = this.addGLTF.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n    const loader = new GLTFLoader();\n    loader.load(\"model.gltf\", gltf => {\n      this.scene.add(gltf);\n    });\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  initializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\n\n  initializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = 4;\n  }\n\n  animate() {\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  addGLTF(gltf) {\n    this.scene.add(gltf);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"boardCanvas\",\n      style: {\n        width: \"80vw\",\n        height: \"40vw\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/julianwildmann/Documents/01_Studium/LMU/04_Master_Thesis/Repository/online-shop/src/components/Viewer.js"],"names":["React","Component","THREE","OBJLoader","GLTFLoader","OrbitControls","require","Viewer","constructor","props","animate","bind","addGLTF","initializeCamera","initializeOrbits","componentDidMount","width","mount","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","controls","domElement","setSize","appendChild","loader","load","gltf","add","componentWillUnmount","cancelAnimationFrame","frameId","removeChild","rotateSpeed","zoomSpeed","panSpeed","position","x","y","z","window","requestAnimationFrame","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OBJLoader from 'three-obj-loader';\nimport GLTFLoader from 'three-gltf-loader';\nconst OrbitControls = require(\"three-orbit-controls\") (THREE);\n\n/* class Viewer extends Component{\n\n\n  componentDidMount(){\n    const width = this.mount.clientWidth\n    const height = this.mount.clientHeight\n\n    //ADD SCENE\n    this.scene = new THREE.Scene()\n\n    //ADD CAMERA\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      width / height,\n      0.1,\n      1000\n    )\n    this.camera.position.z = 4\n\n    //ADD RENDERER\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    this.renderer.setClearColor('#888888')\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    //ADD CUBE\n    const loader = new GLTFLoader();\n      loader.load(\"/model.gltf\", (gltf) => {\n        this.scene.add(gltf.scene);\n      });\n\n    this.start();\n  }\n\ncomponentWillUnmount(){\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\nstart = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\nstop = () => {\n    cancelAnimationFrame(this.frameId)\n  }\nanimate = () => {\n   this.renderScene()\n   this.frameId = window.requestAnimationFrame(this.animate)\n }\n\nrenderScene = () => {\n  this.renderer.render(this.scene, this.camera)\n}\n\nrender(){\n    return(\n      <div\n        style={{ width: '800px', height: '800px' }}\n        ref={(mount) => { this.mount = mount }}\n      />\n    )\n  }\n}\n\n*/\n\nclass Viewer extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addGLTF = this.addGLTF.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\ncomponentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n    \n    const loader = new GLTFLoader(); \n    loader.load(\"model.gltf\", (gltf) => {\n      this.scene.add(gltf);\n    });\n\n    this.animate();\n  }\ncomponentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\ninitializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\ninitializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = 4;\n  }\nanimate() {\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\naddGLTF(gltf) {\n    this.scene.add(gltf);\n  }\nrender() {\n    return (\n      <div>\n        <div\n          id=\"boardCanvas\"\n          style={{ width: \"80vw\", height: \"40vw\" }}\n          ref={mount => {\n            this.mount = mount;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Viewer;"]},"metadata":{},"sourceType":"module"}