{"ast":null,"code":"var _jsxFileName = \"/Users/julianwildmann/Documents/01_Studium/LMU/04_Master_Thesis/Repository/online-shop/src/components/Viewer.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport GLTFLoader from 'three-gltf-loader';\nimport Model from \"./model.gltf\";\n\nconst OrbitControls = require(\"three-orbit-controls\")(THREE);\n\nclass Viewer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.animate = () => {\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight; //ADD SCENE\n\n    this.scene = new THREE.Scene(); //ADD CAMERA\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 4; //ADD RENDERER\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setClearColor('#888888');\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //ADD ORBIT CONTROL\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement); //ADD CUBE\n\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#433F81'\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube); //ADD OBJECT\n\n    const loader = new GLTFLoader();\n    loader.load(Model, object => {\n      this.scene.add(object.scene);\n    });\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        width: '400px',\n        height: '400px'\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/julianwildmann/Documents/01_Studium/LMU/04_Master_Thesis/Repository/online-shop/src/components/Viewer.js"],"names":["React","Component","THREE","GLTFLoader","Model","OrbitControls","require","Viewer","animate","renderScene","frameId","window","requestAnimationFrame","renderer","render","scene","camera","componentDidMount","width","mount","clientWidth","height","clientHeight","Scene","PerspectiveCamera","position","z","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","controls","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","loader","load","object","componentWillUnmount","stop","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport GLTFLoader from 'three-gltf-loader';\nimport Model from \"./model.gltf\"; \n\nconst OrbitControls = require(\"three-orbit-controls\") (THREE);\n\nclass Viewer extends Component{\n\n\n  componentDidMount(){\n    const width = this.mount.clientWidth\n    const height = this.mount.clientHeight\n\n    //ADD SCENE\n    this.scene = new THREE.Scene()\n\n    //ADD CAMERA\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      width / height,\n      0.1,\n      1000\n    )\n    this.camera.position.z = 4\n\n    //ADD RENDERER\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    this.renderer.setClearColor('#888888')\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    //ADD ORBIT CONTROL\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    //ADD CUBE\n    const geometry = new THREE.BoxGeometry(1, 1, 1)\n    const material = new THREE.MeshBasicMaterial({ color: '#433F81'     })\n    this.cube = new THREE.Mesh(geometry, material)\n    this.scene.add(this.cube)\n\n    //ADD OBJECT\n\n    const loader = new GLTFLoader();\n      loader.load(Model, (object) => {\n        this.scene.add(object.scene);\n      });\n\n    this.animate();\n  }\n\ncomponentWillUnmount(){\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\nanimate = () => {\n   this.renderScene()\n   this.frameId = window.requestAnimationFrame(this.animate)\n }\n\nrenderScene = () => {\n  this.renderer.render(this.scene, this.camera)\n}\n\nrender(){\n    return(\n      <div\n        style={{ width: '400px', height: '400px' }}\n        ref={(mount) => { this.mount = mount }}\n      />\n    )\n  }\n}\n\nexport default Viewer;"]},"metadata":{},"sourceType":"module"}