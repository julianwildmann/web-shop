{"ast":null,"code":"/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Skeleton } from 'three';\n/**\n * Fully clones a parsed GLTF, including correct cloning of any SkinnedMesh\n * objects.\n *\n * NOTE(cdata): This is necessary due to limitations of the Three.js clone\n * routine on scenes. Without it, models with skeletal animations will not be\n * cloned properly.\n *\n * @see https://github.com/mrdoob/three.js/issues/5878\n */\n\nexport const cloneGltf = gltf => {\n  const hasScene = gltf.scene != null;\n  const clone = Object.assign({}, gltf, {\n    scene: hasScene ? gltf.scene.clone(true) : null\n  });\n  const skinnedMeshes = {};\n  let hasSkinnedMeshes = false;\n\n  if (hasScene) {\n    gltf.scene.traverse(node => {\n      // Set a high renderOrder while we're here to ensure the model\n      // always renders on top of the skysphere\n      node.renderOrder = 1000; // Materials aren't cloned when cloning meshes; geometry\n      // and materials are copied by reference. This is necessary\n      // for the same model to be used twice with different\n      // environment maps.\n\n      if (Array.isArray(node.material)) {\n        node.material = node.material.map(material => material.clone());\n      } else if (node.material != null) {\n        node.material = node.material.clone();\n      }\n\n      if (node.isSkinnedMesh) {\n        hasSkinnedMeshes = true;\n        skinnedMeshes[node.name] = node;\n      }\n    });\n  }\n\n  const cloneBones = {};\n  const cloneSkinnedMeshes = {};\n\n  if (hasScene && hasSkinnedMeshes) {\n    clone.scene.traverse(node => {\n      if (node.isBone) {\n        cloneBones[node.name] = node;\n      }\n\n      if (node.isSkinnedMesh) {\n        cloneSkinnedMeshes[node.name] = node;\n      }\n    });\n  }\n\n  for (let name in skinnedMeshes) {\n    const skinnedMesh = skinnedMeshes[name];\n    const skeleton = skinnedMesh.skeleton;\n    const cloneSkinnedMesh = cloneSkinnedMeshes[name];\n    const orderedCloneBones = [];\n\n    for (let i = 0; i < skeleton.bones.length; ++i) {\n      const cloneBone = cloneBones[skeleton.bones[i].name];\n      orderedCloneBones.push(cloneBone);\n    }\n\n    cloneSkinnedMesh.bind(new Skeleton(orderedCloneBones, skeleton.boneInverses), cloneSkinnedMesh.matrixWorld);\n  }\n\n  return clone;\n};","map":null,"metadata":{},"sourceType":"module"}